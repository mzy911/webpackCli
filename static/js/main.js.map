{"version":3,"file":"static/js/main.js","mappings":"iJAQAA,QAAQC,IAAI,UAHe,YAI3BD,QAAQC,IAAI,UAFe,Y,IAGrBC,EAAAA,WAEF,WAAYC,IAAO,4CACfC,KAAKD,MAAQA,CAChB,C,0CACD,WACI,OAAOC,KAAKD,KACf,K,EAPCD,GAUAG,EAAgB,IAAIH,EAAc,IACxCF,QAAQC,IAAII,EAAcC,eAE1B,IAAMC,EAAgB,IAAIL,EAAc,cACxCF,QAAQC,IAAIM,EAAcD,eAI1B,IAE4BE,EAFxBC,EAHJ,SAAkBD,GACd,OAAOA,CACV,EAEDR,QAAQC,IAAI,OAAQQ,EAAW,MACHD,EAKT,qBAJfR,QAAQC,IAAI,QAASO,EAAIE,SAelB,IATLC,W,iDACK,G,oCACP,SAAKC,GACD,OAAOR,KAAKS,KAAKC,KAAKF,EACzB,G,iBACD,WACI,OAAOR,KAAKS,KAAKE,KACpB,K,EAPCJ,KAWHG,KAAK,IC9CRd,QAAQC,IAAI,KDwDZ,G","sources":["webpack://webpack-cli/./src/typescript/04 - 泛型.ts","webpack://webpack-cli/./src/index.ts"],"sourcesContent":["// *******************   1、泛型  **************************\nfunction esayIdentity(arg) {\n    return arg;\n}\n// 泛型形式调用\nlet output1 = esayIdentity(\"myString\");\n// 普通形式调用\nlet output2 = esayIdentity(\"myString\");\nconsole.log(\"output1\", output1);\nconsole.log(\"output2\", output2);\nclass IdentityClass {\n    value;\n    constructor(value) {\n        this.value = value;\n    }\n    getIdentity() {\n        return this.value;\n    }\n}\n// 传入 number\nconst myNumberClass = new IdentityClass(68);\nconsole.log(myNumberClass.getIdentity());\n// 传入 string\nconst myStringClass = new IdentityClass(\"Semlinker!\");\nconsole.log(myStringClass.getIdentity());\nfunction identity(arg) {\n    return arg;\n}\nlet myIdentity = identity;\nconsole.log(\"泛型类型\", myIdentity(123));\nfunction constraintIdentity(arg) {\n    console.log(\"参数长度：\", arg.length);\n    return arg;\n}\n// constraintIdentity(123) // 报错\nconstraintIdentity(\"constraintIdentity\");\n// 4.3、约束类\nclass Stack {\n    data = [];\n    push(item) {\n        return this.data.push(item);\n    }\n    pop() {\n        return this.data.pop();\n    }\n}\nconst s1 = new Stack();\n// s1.push(\"li\") // 报错只能 push number\ns1.push(18);\n// 4.4、实战约束 API\nimport axios from \"axios\";\nfunction request(url, obj) {\n    return axios.post(url, obj);\n}\n// request(\"/book/comment\", {\n//   id: 1,\n//   comment: \"非常棒！\"\n// })\nexport default {};\n","import ts from \"./typescript/04 - 泛型\";\n// 对象形式：namespace\nconsole.log(\"ts\", ts);\n// console.log(\"jquery\", $)\n// console.log(\"lala\", document.getElementById(\"box\"))\n// 使用全局注入的 jquery\n// $.each([52, 97], function (index, value) {\n//   console.log('jquery', index + ': ' + value)p\n// })\n// 使用全局注入的 lodash\n// console.log('lodash', _)\n// 使用全局注入定义模块的 utils\n// console.log('utils', utils)\n// 解析ts文件\n// console.log('typescript', name)\n// Promise.resolve('ok').then((val) => {\n//   console.log('res', val)\n// })\n// const fn = () => {\n//   return Promise.resolve().then(() => {\n//     return 'resolve'\n//   })\n// }\n// const init = async () => {\n//   const res = await fn()\n//   console.log('res', res)\n// }\n// init()\n// const fn = () => {\n//   return Promise.resolve().then(() => {\n//     return 'resolve'\n//   })\n// }\n// const init = async () => {\n//   const res = await fn()\n//   console.log('res', res)\n// }\n// init()\n"],"names":["console","log","IdentityClass","value","this","myNumberClass","getIdentity","myStringClass","arg","myIdentity","length","Stack","item","data","push","pop"],"sourceRoot":""}